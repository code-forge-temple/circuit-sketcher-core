import z from "zod";
export declare const SIDE: {
    readonly LEFT: "left";
    readonly TOP: "top";
    readonly RIGHT: "right";
    readonly BOTTOM: "bottom";
};
export type Side = (typeof SIDE)[keyof typeof SIDE];
export type MenuItem = {
    name: string;
    className?: string;
};
export type Coords = {
    x: number;
    y: number;
};
export declare const LabelSchema: z.ZodObject<{
    type: z.ZodString;
    id: z.ZodString;
    x: z.ZodNumber;
    y: z.ZodNumber;
    width: z.ZodNumber;
    height: z.ZodNumber;
    alpha: z.ZodNumber;
    selectable: z.ZodBoolean;
    draggable: z.ZodBoolean;
    angle: z.ZodNumber;
    userData: z.ZodRecord<z.ZodString, z.ZodAny>;
    cssClass: z.ZodString;
    ports: z.ZodArray<z.ZodAny, "many">;
    bgColor: z.ZodString;
    color: z.ZodString;
    stroke: z.ZodNumber;
    radius: z.ZodNumber;
    dasharray: z.ZodNullable<z.ZodAny>;
    text: z.ZodString;
    outlineStroke: z.ZodNumber;
    outlineColor: z.ZodString;
    fontSize: z.ZodNumber;
    fontColor: z.ZodString;
    fontFamily: z.ZodString;
    bold: z.ZodBoolean;
    editor: z.ZodString;
    locator: z.ZodString;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    id: string;
    ports: any[];
    text: string;
    bold: boolean;
    color: string;
    type: string;
    width: number;
    height: number;
    alpha: number;
    selectable: boolean;
    draggable: boolean;
    angle: number;
    userData: Record<string, any>;
    cssClass: string;
    bgColor: string;
    stroke: number;
    radius: number;
    outlineStroke: number;
    outlineColor: string;
    fontSize: number;
    fontColor: string;
    fontFamily: string;
    editor: string;
    locator: string;
    dasharray?: any;
}, {
    x: number;
    y: number;
    id: string;
    ports: any[];
    text: string;
    bold: boolean;
    color: string;
    type: string;
    width: number;
    height: number;
    alpha: number;
    selectable: boolean;
    draggable: boolean;
    angle: number;
    userData: Record<string, any>;
    cssClass: string;
    bgColor: string;
    stroke: number;
    radius: number;
    outlineStroke: number;
    outlineColor: string;
    fontSize: number;
    fontColor: string;
    fontFamily: string;
    editor: string;
    locator: string;
    dasharray?: any;
}>;
export declare const CustomBlockSchema: z.ZodObject<{
    type: z.ZodLiteral<"customDefinitions.CustomBlock">;
    id: z.ZodString;
    x: z.ZodNumber;
    y: z.ZodNumber;
    width: z.ZodNumber;
    height: z.ZodNumber;
    alpha: z.ZodNumber;
    selectable: z.ZodBoolean;
    draggable: z.ZodBoolean;
    angle: z.ZodNumber;
    userData: z.ZodRecord<z.ZodString, z.ZodAny>;
    cssClass: z.ZodString;
    ports: z.ZodArray<z.ZodAny, "many">;
    path: z.ZodString;
    labels: z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        id: z.ZodString;
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        alpha: z.ZodNumber;
        selectable: z.ZodBoolean;
        draggable: z.ZodBoolean;
        angle: z.ZodNumber;
        userData: z.ZodRecord<z.ZodString, z.ZodAny>;
        cssClass: z.ZodString;
        ports: z.ZodArray<z.ZodAny, "many">;
        bgColor: z.ZodString;
        color: z.ZodString;
        stroke: z.ZodNumber;
        radius: z.ZodNumber;
        dasharray: z.ZodNullable<z.ZodAny>;
        text: z.ZodString;
        outlineStroke: z.ZodNumber;
        outlineColor: z.ZodString;
        fontSize: z.ZodNumber;
        fontColor: z.ZodString;
        fontFamily: z.ZodString;
        bold: z.ZodBoolean;
        editor: z.ZodString;
        locator: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }, {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }>, "many">;
    lockedPorts: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    id: string;
    labels: {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }[];
    ports: any[];
    path: string;
    type: "customDefinitions.CustomBlock";
    lockedPorts: boolean;
    width: number;
    height: number;
    alpha: number;
    selectable: boolean;
    draggable: boolean;
    angle: number;
    userData: Record<string, any>;
    cssClass: string;
}, {
    x: number;
    y: number;
    id: string;
    labels: {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }[];
    ports: any[];
    path: string;
    type: "customDefinitions.CustomBlock";
    lockedPorts: boolean;
    width: number;
    height: number;
    alpha: number;
    selectable: boolean;
    draggable: boolean;
    angle: number;
    userData: Record<string, any>;
    cssClass: string;
}>;
export type LibrarySchema = z.infer<typeof LibrarySchemaSchema>;
export declare const LibrarySchemaSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    type: z.ZodLiteral<"customDefinitions.CustomBlock">;
    id: z.ZodString;
    x: z.ZodNumber;
    y: z.ZodNumber;
    width: z.ZodNumber;
    height: z.ZodNumber;
    alpha: z.ZodNumber;
    selectable: z.ZodBoolean;
    draggable: z.ZodBoolean;
    angle: z.ZodNumber;
    userData: z.ZodRecord<z.ZodString, z.ZodAny>;
    cssClass: z.ZodString;
    ports: z.ZodArray<z.ZodAny, "many">;
    path: z.ZodString;
    labels: z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        id: z.ZodString;
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        alpha: z.ZodNumber;
        selectable: z.ZodBoolean;
        draggable: z.ZodBoolean;
        angle: z.ZodNumber;
        userData: z.ZodRecord<z.ZodString, z.ZodAny>;
        cssClass: z.ZodString;
        ports: z.ZodArray<z.ZodAny, "many">;
        bgColor: z.ZodString;
        color: z.ZodString;
        stroke: z.ZodNumber;
        radius: z.ZodNumber;
        dasharray: z.ZodNullable<z.ZodAny>;
        text: z.ZodString;
        outlineStroke: z.ZodNumber;
        outlineColor: z.ZodString;
        fontSize: z.ZodNumber;
        fontColor: z.ZodString;
        fontFamily: z.ZodString;
        bold: z.ZodBoolean;
        editor: z.ZodString;
        locator: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }, {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }>, "many">;
    lockedPorts: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    id: string;
    labels: {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }[];
    ports: any[];
    path: string;
    type: "customDefinitions.CustomBlock";
    lockedPorts: boolean;
    width: number;
    height: number;
    alpha: number;
    selectable: boolean;
    draggable: boolean;
    angle: number;
    userData: Record<string, any>;
    cssClass: string;
}, {
    x: number;
    y: number;
    id: string;
    labels: {
        x: number;
        y: number;
        id: string;
        ports: any[];
        text: string;
        bold: boolean;
        color: string;
        type: string;
        width: number;
        height: number;
        alpha: number;
        selectable: boolean;
        draggable: boolean;
        angle: number;
        userData: Record<string, any>;
        cssClass: string;
        bgColor: string;
        stroke: number;
        radius: number;
        outlineStroke: number;
        outlineColor: string;
        fontSize: number;
        fontColor: string;
        fontFamily: string;
        editor: string;
        locator: string;
        dasharray?: any;
    }[];
    ports: any[];
    path: string;
    type: "customDefinitions.CustomBlock";
    lockedPorts: boolean;
    width: number;
    height: number;
    alpha: number;
    selectable: boolean;
    draggable: boolean;
    angle: number;
    userData: Record<string, any>;
    cssClass: string;
}>>;
